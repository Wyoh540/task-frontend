// This file is auto-generated by @hey-api/openapi-ts

import { type Options, loginAccessToken, getUsers, createUser, getUserMe, getTeams, createTeam, deleteTeam, getTeam, getTasks, createTask, runTask, listJobTasks, deleteTaskResult, getTaskResult, listTeamMembers, addTeamMember, removeTeamMember, updateTeamMember, listLanguages, createLanguage, listWorker } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { LoginAccessTokenData, LoginAccessTokenError, LoginAccessTokenResponse, GetUsersData, CreateUserData, CreateUserError, CreateUserResponse, GetUserMeData, GetTeamsData, GetTeamsError, GetTeamsResponse, CreateTeamData, CreateTeamError, CreateTeamResponse, DeleteTeamData, DeleteTeamError, DeleteTeamResponse, GetTeamData, GetTasksData, GetTasksError, GetTasksResponse, CreateTaskData, CreateTaskError, CreateTaskResponse, RunTaskData, RunTaskError, RunTaskResponse, ListJobTasksData, ListJobTasksError, ListJobTasksResponse, DeleteTaskResultData, DeleteTaskResultError, DeleteTaskResultResponse, GetTaskResultData, ListTeamMembersData, ListTeamMembersError, ListTeamMembersResponse, AddTeamMemberData, AddTeamMemberError, AddTeamMemberResponse, RemoveTeamMemberData, RemoveTeamMemberError, RemoveTeamMemberResponse, UpdateTeamMemberData, UpdateTeamMemberError, UpdateTeamMemberResponse, ListLanguagesData, CreateLanguageData, CreateLanguageError, CreateLanguageResponse, ListWorkerData, ListWorkerError, ListWorkerResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const loginAccessTokenQueryKey = (options: Options<LoginAccessTokenData>) => createQueryKey('loginAccessToken', options);

export const loginAccessTokenOptions = (options: Options<LoginAccessTokenData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await loginAccessToken({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginAccessTokenQueryKey(options)
    });
};

export const loginAccessTokenMutation = (options?: Partial<Options<LoginAccessTokenData>>) => {
    const mutationOptions: UseMutationOptions<LoginAccessTokenResponse, AxiosError<LoginAccessTokenError>, Options<LoginAccessTokenData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await loginAccessToken({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) => createQueryKey('getUsers', options);

export const getUsersOptions = (options?: Options<GetUsersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUsersQueryKey(options)
    });
};

export const createUserQueryKey = (options: Options<CreateUserData>) => createQueryKey('createUser', options);

export const createUserOptions = (options: Options<CreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createUserQueryKey(options)
    });
};

export const createUserMutation = (options?: Partial<Options<CreateUserData>>) => {
    const mutationOptions: UseMutationOptions<CreateUserResponse, AxiosError<CreateUserError>, Options<CreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getUserMeQueryKey = (options?: Options<GetUserMeData>) => createQueryKey('getUserMe', options);

export const getUserMeOptions = (options?: Options<GetUserMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserMeQueryKey(options)
    });
};

export const getTeamsQueryKey = (options?: Options<GetTeamsData>) => createQueryKey('getTeams', options);

export const getTeamsOptions = (options?: Options<GetTeamsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTeams({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTeamsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getTeamsInfiniteQueryKey = (options?: Options<GetTeamsData>): QueryKey<Options<GetTeamsData>> => createQueryKey('getTeams', options, true);

export const getTeamsInfiniteOptions = (options?: Options<GetTeamsData>) => {
    return infiniteQueryOptions<GetTeamsResponse, AxiosError<GetTeamsError>, InfiniteData<GetTeamsResponse>, QueryKey<Options<GetTeamsData>>, number | Pick<QueryKey<Options<GetTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetTeamsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getTeams({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTeamsInfiniteQueryKey(options)
    });
};

export const createTeamQueryKey = (options: Options<CreateTeamData>) => createQueryKey('createTeam', options);

export const createTeamOptions = (options: Options<CreateTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTeamQueryKey(options)
    });
};

export const createTeamMutation = (options?: Partial<Options<CreateTeamData>>) => {
    const mutationOptions: UseMutationOptions<CreateTeamResponse, AxiosError<CreateTeamError>, Options<CreateTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const deleteTeamMutation = (options?: Partial<Options<DeleteTeamData>>) => {
    const mutationOptions: UseMutationOptions<DeleteTeamResponse, AxiosError<DeleteTeamError>, Options<DeleteTeamData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTeam({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTeamQueryKey = (options: Options<GetTeamData>) => createQueryKey('getTeam', options);

export const getTeamOptions = (options: Options<GetTeamData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTeam({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTeamQueryKey(options)
    });
};

export const getTasksQueryKey = (options: Options<GetTasksData>) => createQueryKey('getTasks', options);

export const getTasksOptions = (options: Options<GetTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksQueryKey(options)
    });
};

export const getTasksInfiniteQueryKey = (options: Options<GetTasksData>): QueryKey<Options<GetTasksData>> => createQueryKey('getTasks', options, true);

export const getTasksInfiniteOptions = (options: Options<GetTasksData>) => {
    return infiniteQueryOptions<GetTasksResponse, AxiosError<GetTasksError>, InfiniteData<GetTasksResponse>, QueryKey<Options<GetTasksData>>, number | Pick<QueryKey<Options<GetTasksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetTasksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getTasks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksInfiniteQueryKey(options)
    });
};

export const createTaskQueryKey = (options: Options<CreateTaskData>) => createQueryKey('createTask', options);

export const createTaskOptions = (options: Options<CreateTaskData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTask({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTaskQueryKey(options)
    });
};

export const createTaskMutation = (options?: Partial<Options<CreateTaskData>>) => {
    const mutationOptions: UseMutationOptions<CreateTaskResponse, AxiosError<CreateTaskError>, Options<CreateTaskData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTask({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const runTaskQueryKey = (options: Options<RunTaskData>) => createQueryKey('runTask', options);

export const runTaskOptions = (options: Options<RunTaskData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await runTask({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: runTaskQueryKey(options)
    });
};

export const runTaskMutation = (options?: Partial<Options<RunTaskData>>) => {
    const mutationOptions: UseMutationOptions<RunTaskResponse, AxiosError<RunTaskError>, Options<RunTaskData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await runTask({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listJobTasksQueryKey = (options: Options<ListJobTasksData>) => createQueryKey('listJobTasks', options);

export const listJobTasksOptions = (options: Options<ListJobTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listJobTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listJobTasksQueryKey(options)
    });
};

export const listJobTasksInfiniteQueryKey = (options: Options<ListJobTasksData>): QueryKey<Options<ListJobTasksData>> => createQueryKey('listJobTasks', options, true);

export const listJobTasksInfiniteOptions = (options: Options<ListJobTasksData>) => {
    return infiniteQueryOptions<ListJobTasksResponse, AxiosError<ListJobTasksError>, InfiniteData<ListJobTasksResponse>, QueryKey<Options<ListJobTasksData>>, number | Pick<QueryKey<Options<ListJobTasksData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListJobTasksData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listJobTasks({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listJobTasksInfiniteQueryKey(options)
    });
};

export const deleteTaskResultMutation = (options?: Partial<Options<DeleteTaskResultData>>) => {
    const mutationOptions: UseMutationOptions<DeleteTaskResultResponse, AxiosError<DeleteTaskResultError>, Options<DeleteTaskResultData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTaskResult({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTaskResultQueryKey = (options: Options<GetTaskResultData>) => createQueryKey('getTaskResult', options);

export const getTaskResultOptions = (options: Options<GetTaskResultData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTaskResult({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTaskResultQueryKey(options)
    });
};

export const listTeamMembersQueryKey = (options: Options<ListTeamMembersData>) => createQueryKey('listTeamMembers', options);

export const listTeamMembersOptions = (options: Options<ListTeamMembersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTeamMembers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTeamMembersQueryKey(options)
    });
};

export const listTeamMembersInfiniteQueryKey = (options: Options<ListTeamMembersData>): QueryKey<Options<ListTeamMembersData>> => createQueryKey('listTeamMembers', options, true);

export const listTeamMembersInfiniteOptions = (options: Options<ListTeamMembersData>) => {
    return infiniteQueryOptions<ListTeamMembersResponse, AxiosError<ListTeamMembersError>, InfiniteData<ListTeamMembersResponse>, QueryKey<Options<ListTeamMembersData>>, number | Pick<QueryKey<Options<ListTeamMembersData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListTeamMembersData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listTeamMembers({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTeamMembersInfiniteQueryKey(options)
    });
};

export const addTeamMemberQueryKey = (options: Options<AddTeamMemberData>) => createQueryKey('addTeamMember', options);

export const addTeamMemberOptions = (options: Options<AddTeamMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addTeamMember({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addTeamMemberQueryKey(options)
    });
};

export const addTeamMemberMutation = (options?: Partial<Options<AddTeamMemberData>>) => {
    const mutationOptions: UseMutationOptions<AddTeamMemberResponse, AxiosError<AddTeamMemberError>, Options<AddTeamMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addTeamMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const removeTeamMemberMutation = (options?: Partial<Options<RemoveTeamMemberData>>) => {
    const mutationOptions: UseMutationOptions<RemoveTeamMemberResponse, AxiosError<RemoveTeamMemberError>, Options<RemoveTeamMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeTeamMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const updateTeamMemberMutation = (options?: Partial<Options<UpdateTeamMemberData>>) => {
    const mutationOptions: UseMutationOptions<UpdateTeamMemberResponse, AxiosError<UpdateTeamMemberError>, Options<UpdateTeamMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTeamMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listLanguagesQueryKey = (options?: Options<ListLanguagesData>) => createQueryKey('listLanguages', options);

export const listLanguagesOptions = (options?: Options<ListLanguagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listLanguages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listLanguagesQueryKey(options)
    });
};

export const createLanguageQueryKey = (options: Options<CreateLanguageData>) => createQueryKey('createLanguage', options);

export const createLanguageOptions = (options: Options<CreateLanguageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createLanguage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createLanguageQueryKey(options)
    });
};

export const createLanguageMutation = (options?: Partial<Options<CreateLanguageData>>) => {
    const mutationOptions: UseMutationOptions<CreateLanguageResponse, AxiosError<CreateLanguageError>, Options<CreateLanguageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createLanguage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listWorkerQueryKey = (options?: Options<ListWorkerData>) => createQueryKey('listWorker', options);

export const listWorkerOptions = (options?: Options<ListWorkerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listWorker({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listWorkerQueryKey(options)
    });
};

export const listWorkerInfiniteQueryKey = (options?: Options<ListWorkerData>): QueryKey<Options<ListWorkerData>> => createQueryKey('listWorker', options, true);

export const listWorkerInfiniteOptions = (options?: Options<ListWorkerData>) => {
    return infiniteQueryOptions<ListWorkerResponse, AxiosError<ListWorkerError>, InfiniteData<ListWorkerResponse>, QueryKey<Options<ListWorkerData>>, number | Pick<QueryKey<Options<ListWorkerData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListWorkerData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listWorker({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listWorkerInfiniteQueryKey(options)
    });
};
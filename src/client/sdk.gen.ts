// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { LoginAccessTokenData, LoginAccessTokenResponse, LoginAccessTokenError, GetUsersData, GetUsersResponse, CreateUserData, CreateUserResponse, CreateUserError, GetUserMeData, GetUserMeResponse, GetTeamsData, GetTeamsResponse, GetTeamsError, CreateTeamData, CreateTeamResponse, CreateTeamError, DeleteTeamData, DeleteTeamResponse, DeleteTeamError, GetTeamData, GetTeamResponse, GetTeamError, GetTasksData, GetTasksResponse, GetTasksError, CreateTaskData, CreateTaskResponse, CreateTaskError, RunTaskData, RunTaskResponse, RunTaskError, ListJobTasksData, ListJobTasksResponse, ListJobTasksError, DeleteTaskResultData, DeleteTaskResultResponse, DeleteTaskResultError, GetTaskResultData, GetTaskResultResponse, GetTaskResultError, ListTeamMembersData, ListTeamMembersResponse, ListTeamMembersError, AddTeamMemberData, AddTeamMemberResponse, AddTeamMemberError, RemoveTeamMemberData, RemoveTeamMemberResponse, RemoveTeamMemberError, UpdateTeamMemberData, UpdateTeamMemberResponse, UpdateTeamMemberError, GetLanguagesData, GetLanguagesResponse, ListWorkerData, ListWorkerResponse, ListWorkerError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login Access Token
 */
export const loginAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAccessTokenResponse, LoginAccessTokenError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/login/access-token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get Users
 * 获取所有用户列表
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, unknown, ThrowOnError>({
        url: '/api/v1/users/',
        ...options
    });
};

/**
 * Create User
 * 创建用户
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        url: '/api/v1/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Me
 */
export const getUserMe = <ThrowOnError extends boolean = false>(options?: Options<GetUserMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Get Teams
 * 获取空间列表
 */
export const getTeams = <ThrowOnError extends boolean = false>(options?: Options<GetTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTeamsResponse, GetTeamsError, ThrowOnError>({
        url: '/api/v1/team/',
        ...options
    });
};

/**
 * Create Team
 * 空间创建
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponse, CreateTeamError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Team
 * 删除空间
 */
export const deleteTeam = <ThrowOnError extends boolean = false>(options: Options<DeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTeamResponse, DeleteTeamError, ThrowOnError>({
        url: '/api/v1/team/{team_id}',
        ...options
    });
};

/**
 * Get Team
 * 获取空间详情
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamResponse, GetTeamError, ThrowOnError>({
        url: '/api/v1/team/{team_id}',
        ...options
    });
};

/**
 * Get Tasks
 */
export const getTasks = <ThrowOnError extends boolean = false>(options: Options<GetTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTasksResponse, GetTasksError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/job',
        ...options
    });
};

/**
 * Create Task
 * 创建任务
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTaskResponse, CreateTaskError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/team/{team_id}/job',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Run Task
 * 运行任务
 */
export const runTask = <ThrowOnError extends boolean = false>(options: Options<RunTaskData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RunTaskResponse, RunTaskError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/job/{job_id}',
        ...options
    });
};

/**
 * List Job Tasks
 * 获取任务执行结果列表
 */
export const listJobTasks = <ThrowOnError extends boolean = false>(options: Options<ListJobTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListJobTasksResponse, ListJobTasksError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/job/{job_id}/result/',
        ...options
    });
};

/**
 * Delete Task Result
 * 删除任务结果
 */
export const deleteTaskResult = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTaskResultResponse, DeleteTaskResultError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/job/{job_id}/result/{task_id}',
        ...options
    });
};

/**
 * Get Task Result
 * 获取celery任务执行结果
 */
export const getTaskResult = <ThrowOnError extends boolean = false>(options: Options<GetTaskResultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaskResultResponse, GetTaskResultError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/job/{job_id}/result/{task_id}',
        ...options
    });
};

/**
 * List Team Members
 * 获取空间成员列表（含管理员标记）
 */
export const listTeamMembers = <ThrowOnError extends boolean = false>(options: Options<ListTeamMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamMembersResponse, ListTeamMembersError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/members',
        ...options
    });
};

/**
 * Add Team Member
 * 添加空间成员（可指定是否为管理员）
 */
export const addTeamMember = <ThrowOnError extends boolean = false>(options: Options<AddTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTeamMemberResponse, AddTeamMemberError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove Team Member
 * 移除空间成员
 */
export const removeTeamMember = <ThrowOnError extends boolean = false>(options: Options<RemoveTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTeamMemberResponse, RemoveTeamMemberError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/members/{user_id}',
        ...options
    });
};

/**
 * Update Team Member
 * 设置/取消管理员
 */
export const updateTeamMember = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateTeamMemberResponse, UpdateTeamMemberError, ThrowOnError>({
        url: '/api/v1/team/{team_id}/members/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Languages
 * 获取所有语言
 */
export const getLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLanguagesResponse, unknown, ThrowOnError>({
        url: '/api/v1/language/',
        ...options
    });
};

/**
 * List Worker
 * 获取所有 worker 的状态
 */
export const listWorker = <ThrowOnError extends boolean = false>(options?: Options<ListWorkerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWorkerResponse, ListWorkerError, ThrowOnError>({
        url: '/api/v1/worker/',
        ...options
    });
};
// This file is auto-generated by @hey-api/openapi-ts

export type BodyLoginAccessToken = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type CreateLanguage = {
    language_name: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type JobCreate = {
    name: string;
    description?: string | null;
    script_content?: string | null;
    script_path?: string | null;
    language_id: number;
};

export type JobOut = {
    name: string;
    description?: string | null;
    script_content?: string | null;
    script_path?: string | null;
    id: number;
    language: Language;
    team_id: number;
    owner: UserPubic;
};

export type JobUpdate = {
    name?: string | null;
    description?: string | null;
    script_content?: string | null;
    script_path?: string | null;
    ignore_result?: boolean | null;
    language_id?: number | null;
};

/**
 * 语言表
 */
export type Language = {
    id?: number | null;
    language: string;
};

/**
 * 节点状态
 */
export enum NodeStatus {
    _1 = 1,
    _2 = 2
}

export type PageJobOut = {
    items: Array<JobOut>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type PageTaskResultList = {
    items: Array<TaskResultList>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type PageTeamMemberList = {
    items: Array<TeamMemberList>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type PageTeamPubilc = {
    items: Array<TeamPubilc>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

export type PageWorkNode = {
    items: Array<WorkNode>;
    total: number | null;
    page: number | null;
    size: number | null;
    pages?: number | null;
};

/**
 * 任务执行结果
 */
export type Result = {
    stdout: string;
    stderr: string;
    return_code: number;
    success: boolean;
};

/**
 * 任务执行结果详情
 */
export type TaskResult = {
    task_id: string;
    create_at: string;
    /**
     * 任务状态
     */
    status: 'PENDING' | 'STARTED' | 'SUCCESS' | 'FAILURE' | 'RETRY';
    /**
     * 任务执行结果
     */
    result: Result | null;
    /**
     * 任务完成时间
     */
    date_done: string | null;
};

/**
 * 任务执行结果列表
 */
export type TaskResultList = {
    task_id: string;
    create_at: string;
    /**
     * 任务状态
     */
    status: 'PENDING' | 'STARTED' | 'SUCCESS' | 'FAILURE' | 'RETRY';
    /**
     * 任务完成时间
     */
    date_done: string | null;
};

/**
 * 任务空间创建
 */
export type TeamCreate = {
    name: string;
    description: string;
};

export type TeamMemberCreate = {
    user_id: number;
    is_admin?: boolean;
};

export type TeamMemberList = {
    id: number;
    user?: UserPubic | null;
    is_admin: boolean;
};

export type TeamMemberPublic = {
    user_id: number;
    is_admin?: boolean;
    id: number;
    user?: UserPubic | null;
};

export type TeamMemberUpdate = {
    is_admin?: boolean | null;
};

/**
 * 任务组公共信息
 */
export type TeamPubilc = {
    id: number;
    name: string;
    description: string;
    create_by: number;
    create_at: string;
    update_at: string;
    job_count: number;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UserCreate = {
    email?: string | null;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    username: string;
    password: string;
};

export type UserPubic = {
    id: number;
    username: string;
    email?: string | null;
    phone?: string | null;
    is_active?: boolean;
    is_superuser?: boolean;
};

export type UserUpdate = {
    email?: string | null;
    full_name?: string | null;
};

export type UsersPublic = {
    data: Array<UserPubic>;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

/**
 * 工作节点表
 */
export type WorkNode = {
    /**
     * 工作节点ID
     */
    id?: number | null;
    /**
     * 节点IP地址
     */
    node_ip: string;
    node_name: string;
    /**
     * 节点状态, 1:在线, 2: 离线
     */
    status?: NodeStatus;
    /**
     * 最后心跳时间
     */
    last_ping?: string | null;
    /**
     * 操作系统平台
     */
    platform?: string | null;
    create_at?: string;
    update_at?: string;
};

export type LoginAccessTokenData = {
    body: BodyLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAccessTokenError = LoginAccessTokenErrors[keyof LoginAccessTokenErrors];

export type LoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginAccessTokenResponse = LoginAccessTokenResponses[keyof LoginAccessTokenResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type GetUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type CreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPubic;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type GetUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPubic;
};

export type GetUserMeResponse = GetUserMeResponses[keyof GetUserMeResponses];

export type PatchUserMeData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type PatchUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchUserMeError = PatchUserMeErrors[keyof PatchUserMeErrors];

export type PatchUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPubic;
};

export type PatchUserMeResponse = PatchUserMeResponses[keyof PatchUserMeResponses];

export type GetTeamsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        size?: number;
    };
    url: '/api/v1/team/';
};

export type GetTeamsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTeamsError = GetTeamsErrors[keyof GetTeamsErrors];

export type GetTeamsResponses = {
    /**
     * Successful Response
     */
    200: PageTeamPubilc;
};

export type GetTeamsResponse = GetTeamsResponses[keyof GetTeamsResponses];

export type CreateTeamData = {
    body: TeamCreate;
    path?: never;
    query?: never;
    url: '/api/v1/team/';
};

export type CreateTeamErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTeamError = CreateTeamErrors[keyof CreateTeamErrors];

export type CreateTeamResponses = {
    /**
     * Successful Response
     */
    200: TeamPubilc;
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type DeleteTeamData = {
    body?: never;
    path: {
        team_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}';
};

export type DeleteTeamErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTeamError = DeleteTeamErrors[keyof DeleteTeamErrors];

export type DeleteTeamResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteTeamResponse = DeleteTeamResponses[keyof DeleteTeamResponses];

export type GetTeamData = {
    body?: never;
    path: {
        team_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}';
};

export type GetTeamErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTeamError = GetTeamErrors[keyof GetTeamErrors];

export type GetTeamResponses = {
    /**
     * Successful Response
     */
    200: TeamPubilc;
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type ListJobsData = {
    body?: never;
    path: {
        team_id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        size?: number;
    };
    url: '/api/v1/team/{team_id}/job';
};

export type ListJobsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListJobsError = ListJobsErrors[keyof ListJobsErrors];

export type ListJobsResponses = {
    /**
     * Successful Response
     */
    200: PageJobOut;
};

export type ListJobsResponse = ListJobsResponses[keyof ListJobsResponses];

export type CreateJobData = {
    body: JobCreate;
    path: {
        team_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job';
};

export type CreateJobErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateJobError = CreateJobErrors[keyof CreateJobErrors];

export type CreateJobResponses = {
    /**
     * Successful Response
     */
    200: JobOut;
};

export type CreateJobResponse = CreateJobResponses[keyof CreateJobResponses];

export type DeleteJobData = {
    body?: never;
    path: {
        team_id: number;
        job_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job/{job_id}';
};

export type DeleteJobErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteJobError = DeleteJobErrors[keyof DeleteJobErrors];

export type DeleteJobResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteJobResponse = DeleteJobResponses[keyof DeleteJobResponses];

export type RunTaskData = {
    body?: never;
    path: {
        team_id: number;
        job_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job/{job_id}';
};

export type RunTaskErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunTaskError = RunTaskErrors[keyof RunTaskErrors];

export type RunTaskResponses = {
    /**
     * Successful Response
     */
    200: TaskResult;
};

export type RunTaskResponse = RunTaskResponses[keyof RunTaskResponses];

export type UpdateJobData = {
    body: JobUpdate;
    path: {
        team_id: number;
        job_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job/{job_id}';
};

export type UpdateJobErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateJobError = UpdateJobErrors[keyof UpdateJobErrors];

export type UpdateJobResponses = {
    /**
     * Successful Response
     */
    200: JobOut;
};

export type UpdateJobResponse = UpdateJobResponses[keyof UpdateJobResponses];

export type ListJobTasksData = {
    body?: never;
    path: {
        team_id: number;
        job_id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        size?: number;
    };
    url: '/api/v1/team/{team_id}/job/{job_id}/result/';
};

export type ListJobTasksErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListJobTasksError = ListJobTasksErrors[keyof ListJobTasksErrors];

export type ListJobTasksResponses = {
    /**
     * Successful Response
     */
    200: PageTaskResultList;
};

export type ListJobTasksResponse = ListJobTasksResponses[keyof ListJobTasksResponses];

export type DeleteTaskResultData = {
    body?: never;
    path: {
        team_id: number;
        job_id: number;
        task_id: string;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job/{job_id}/result/{task_id}';
};

export type DeleteTaskResultErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTaskResultError = DeleteTaskResultErrors[keyof DeleteTaskResultErrors];

export type DeleteTaskResultResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteTaskResultResponse = DeleteTaskResultResponses[keyof DeleteTaskResultResponses];

export type GetTaskResultData = {
    body?: never;
    path: {
        team_id: number;
        job_id: number;
        task_id: string;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/job/{job_id}/result/{task_id}';
};

export type GetTaskResultErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaskResultError = GetTaskResultErrors[keyof GetTaskResultErrors];

export type GetTaskResultResponses = {
    /**
     * Successful Response
     */
    200: TaskResult;
};

export type GetTaskResultResponse = GetTaskResultResponses[keyof GetTaskResultResponses];

export type ListTeamMembersData = {
    body?: never;
    path: {
        team_id: number;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        size?: number;
    };
    url: '/api/v1/team/{team_id}/members';
};

export type ListTeamMembersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTeamMembersError = ListTeamMembersErrors[keyof ListTeamMembersErrors];

export type ListTeamMembersResponses = {
    /**
     * Successful Response
     */
    200: PageTeamMemberList;
};

export type ListTeamMembersResponse = ListTeamMembersResponses[keyof ListTeamMembersResponses];

export type CreateTeamMemberData = {
    body: TeamMemberCreate;
    path: {
        team_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/members';
};

export type CreateTeamMemberErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTeamMemberError = CreateTeamMemberErrors[keyof CreateTeamMemberErrors];

export type CreateTeamMemberResponses = {
    /**
     * Successful Response
     */
    200: TeamMemberPublic;
};

export type CreateTeamMemberResponse = CreateTeamMemberResponses[keyof CreateTeamMemberResponses];

export type RemoveTeamMemberData = {
    body?: never;
    path: {
        team_id: number;
        user_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/members/{user_id}';
};

export type RemoveTeamMemberErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveTeamMemberError = RemoveTeamMemberErrors[keyof RemoveTeamMemberErrors];

export type RemoveTeamMemberResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type RemoveTeamMemberResponse = RemoveTeamMemberResponses[keyof RemoveTeamMemberResponses];

export type UpdateTeamMemberData = {
    body: TeamMemberUpdate;
    path: {
        team_id: number;
        user_id: number;
    };
    query?: never;
    url: '/api/v1/team/{team_id}/members/{user_id}';
};

export type UpdateTeamMemberErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTeamMemberError = UpdateTeamMemberErrors[keyof UpdateTeamMemberErrors];

export type UpdateTeamMemberResponses = {
    /**
     * Successful Response
     */
    200: TeamMemberPublic;
};

export type UpdateTeamMemberResponse = UpdateTeamMemberResponses[keyof UpdateTeamMemberResponses];

export type ListLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/language/';
};

export type ListLanguagesResponses = {
    /**
     * Successful Response
     */
    200: Array<Language>;
};

export type ListLanguagesResponse = ListLanguagesResponses[keyof ListLanguagesResponses];

export type CreateLanguageData = {
    body: CreateLanguage;
    path?: never;
    query?: never;
    url: '/api/v1/language/';
};

export type CreateLanguageErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateLanguageError = CreateLanguageErrors[keyof CreateLanguageErrors];

export type CreateLanguageResponses = {
    /**
     * Successful Response
     */
    200: Language;
};

export type CreateLanguageResponse = CreateLanguageResponses[keyof CreateLanguageResponses];

export type ListWorkerData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Page size
         */
        size?: number;
    };
    url: '/api/v1/worker/';
};

export type ListWorkerErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListWorkerError = ListWorkerErrors[keyof ListWorkerErrors];

export type ListWorkerResponses = {
    /**
     * Successful Response
     */
    200: PageWorkNode;
};

export type ListWorkerResponse = ListWorkerResponses[keyof ListWorkerResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8080' | (string & {});
};
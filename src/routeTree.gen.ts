/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedTeamsImport } from './routes/_authenticated/teams'
import { Route as AuthenticatedTeamsTeamIdRouteImport } from './routes/_authenticated/teams_/$teamId/route'
import { Route as AuthenticatedTeamsTeamIdIndexImport } from './routes/_authenticated/teams_/$teamId/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedTeamsRoute = AuthenticatedTeamsImport.update({
  id: '/_authenticated/teams',
  path: '/teams',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedTeamsTeamIdRouteRoute =
  AuthenticatedTeamsTeamIdRouteImport.update({
    id: '/_authenticated/teams_/$teamId',
    path: '/teams/$teamId',
    getParentRoute: () => rootRoute,
  } as any)

const AuthenticatedTeamsTeamIdIndexRoute =
  AuthenticatedTeamsTeamIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedTeamsTeamIdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/teams': {
      id: '/_authenticated/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof AuthenticatedTeamsImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/teams_/$teamId': {
      id: '/_authenticated/teams_/$teamId'
      path: '/teams/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof AuthenticatedTeamsTeamIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/teams_/$teamId/': {
      id: '/_authenticated/teams_/$teamId/'
      path: '/'
      fullPath: '/teams/$teamId/'
      preLoaderRoute: typeof AuthenticatedTeamsTeamIdIndexImport
      parentRoute: typeof AuthenticatedTeamsTeamIdRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedTeamsTeamIdRouteRouteChildren {
  AuthenticatedTeamsTeamIdIndexRoute: typeof AuthenticatedTeamsTeamIdIndexRoute
}

const AuthenticatedTeamsTeamIdRouteRouteChildren: AuthenticatedTeamsTeamIdRouteRouteChildren =
  {
    AuthenticatedTeamsTeamIdIndexRoute: AuthenticatedTeamsTeamIdIndexRoute,
  }

const AuthenticatedTeamsTeamIdRouteRouteWithChildren =
  AuthenticatedTeamsTeamIdRouteRoute._addFileChildren(
    AuthenticatedTeamsTeamIdRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/teams': typeof AuthenticatedTeamsRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdRouteRouteWithChildren
  '/teams/$teamId/': typeof AuthenticatedTeamsTeamIdIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/teams': typeof AuthenticatedTeamsRoute
  '/teams/$teamId': typeof AuthenticatedTeamsTeamIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/_authenticated/teams': typeof AuthenticatedTeamsRoute
  '/_authenticated/teams_/$teamId': typeof AuthenticatedTeamsTeamIdRouteRouteWithChildren
  '/_authenticated/teams_/$teamId/': typeof AuthenticatedTeamsTeamIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/teams' | '/teams/$teamId' | '/teams/$teamId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/teams' | '/teams/$teamId'
  id:
    | '__root__'
    | '/login'
    | '/_authenticated/teams'
    | '/_authenticated/teams_/$teamId'
    | '/_authenticated/teams_/$teamId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  AuthenticatedTeamsRoute: typeof AuthenticatedTeamsRoute
  AuthenticatedTeamsTeamIdRouteRoute: typeof AuthenticatedTeamsTeamIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  AuthenticatedTeamsRoute: AuthenticatedTeamsRoute,
  AuthenticatedTeamsTeamIdRouteRoute:
    AuthenticatedTeamsTeamIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/_authenticated/teams",
        "/_authenticated/teams_/$teamId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/teams": {
      "filePath": "_authenticated/teams.tsx"
    },
    "/_authenticated/teams_/$teamId": {
      "filePath": "_authenticated/teams_/$teamId/route.tsx",
      "children": [
        "/_authenticated/teams_/$teamId/"
      ]
    },
    "/_authenticated/teams_/$teamId/": {
      "filePath": "_authenticated/teams_/$teamId/index.tsx",
      "parent": "/_authenticated/teams_/$teamId"
    }
  }
}
ROUTE_MANIFEST_END */
